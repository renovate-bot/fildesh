load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_test")
load("//test/tool:fildespawn_test.bzl", "fildespawn_test")
load("//tool/bazel:fildesh_run.bzl", "fildesh_run")
load("//tool/bazel:spawn_test.bzl", "spawn_test")

cc_binary(
    name = "success",
    testonly = True,
    srcs = ["success.c"],
)

cc_binary(
    name = "failure",
    testonly = True,
    srcs = ["failure.c"],
)

cc_test(
    name = "success_test",
    srcs = ["success.c"],
)

#### comparispawn

spawn_test(
    name = "comparispawn_diff_test",
    args = [
        "$(location //test/expect:literal_hello.txt)",
        "$(location //tool:shout)",
        "-",
        "hel",
        "lo",
    ],
    binary = "//tool:comparispawn",
    data = [
        "//test/expect:literal_hello.txt",
        "//tool:shout",
    ],
    expect_failure = True,
)

spawn_test(
    name = "comparispawn_failure_test",
    args = [
        "/dev/null",
        "$(location :failure)",
    ],
    binary = "//tool:comparispawn",
    data = [":failure"],
    expect_failure = True,
)

spawn_test(
    name = "comparispawn_shout_hello_test",
    args = [
        "$(location //test/expect:literal_hello.txt)",
        "$(location //tool:shout)",
        "-",
        "hello",
    ],
    binary = "//tool:comparispawn",
    data = [
        "//test/expect:literal_hello.txt",
        "//tool:shout",
    ],
)

#### expectish

cc_test(
    name = "expectish_hello_test",
    srcs = ["//tool:expectish.c"],
    args = [
        "$(location //test/expect:literal_hello.txt)",
        "hello",
    ],
    data = ["//test/expect:literal_hello.txt"],
)

#### fildespawn

fildespawn_test(
    name = "fildespawn_success_test",
    args = [
        "--",
        "$(location :success)",
    ],
    data = [":success"],
)

fildespawn_test(
    name = "fildespawn_stdin_test",
    args = [
        "stdin=open_readonly:$(location //test/expect:literal_hello.txt)",
        "--",
        "$(location //tool:expectish)",
        "-",
        "hello",
    ],
    data = [
        "//test/expect:literal_hello.txt",
        "//tool:expectish",
    ],
)

#### pipem_test

cc_test(
    name = "pipem_test",
    srcs = ["pipem_test.c"],
    args = [
        "$(location //tool:shout)",
        "$(location //tool:expectish)",
    ],
    data = [
        "//tool:expectish",
        "//tool:shout",
    ],
    deps = ["//:fildesh_tool_lib"],
)

#### spawn

# spawn ! !
cc_test(
    name = "spawn_not_not_test",
    srcs = ["//tool:spawn.c"],
    args = [
        "!",
        "!",
    ],
)

# spawn spawn ! !
spawn_test(
    name = "spawn_spawn_not_not_test",
    args = [
        "!",
        "!",
    ],
    binary = "//tool:spawn",
)

# spawn ! spawn !
spawn_test(
    name = "spawn_not_spawn_not_test",
    args = ["!"],
    binary = "//tool:spawn",
    expect_failure = True,
)

# spawn ! spawn
spawn_test(
    name = "spawn_not_spawn_nothing_test",
    binary = "//tool:spawn",
    expect_failure = True,
)

# spawn ! spawn file_that.doesnotexist
spawn_test(
    name = "spawn_not_spawn_absent_test",
    args = ["$(location //tool:spawn).doesnotexist"],
    binary = "//tool:spawn",
    expect_failure = True,
)

# spawn ! spawn ! file_that.doesnotexist
spawn_test(
    name = "spawn_not_spawn_not_absent_test",
    args = [
        "!",
        "$(location //tool:spawn).doesnotexist",
    ],
    binary = "//tool:spawn",
    expect_failure = True,
)

cc_test(
    name = "spawn_status_test",
    srcs = [
        "spawn_status_test.c",
        "//tool:spawn.c",
    ],
    args = [
        "$(location :success)",
        "$(location :failure)",
    ],
    data = [
        ":failure",
        ":success",
    ],
    defines = ["UNIT_TESTING"],
)

#### cembed & cswitch

fildesh_run(
    name = "embed_test_cembed_h",
    testonly = True,
    input_by_option = {
        "x_127": "//test/expect:literal_127.txt",
        "x_hello": "//test/expect:literal_hello.txt",
    },
    output_by_option = {"o": ":embed_test.cembed.h"},
    src_content = """
(: literal_127_file Filepath .self.opt.x_127)
(: literal_hello_file Filepath .self.opt.x_hello)
(: out_file Filepath .self.opt.o)
cembed -o $(XOF out_file) $(XOF literal_127_file) $(XOF literal_hello_file)
    """,
    tool_by_alias = {"cembed": "//tool:cembed"},
)

fildesh_run(
    name = "embed_test_cswitch_h",
    testonly = True,
    input_by_xof = {"item_file": ":embed_test.txt"},
    output_by_xof = {"out": ":embed_test.cswitch.h"},
    src_content = """
cswitch key -case-pfx "fn = item_" -x $(XOF item_file) -o $(XOF out)
    """,
    tool_by_alias = {"cswitch": "//tool:cswitch"},
)

cc_test(
    name = "embed_test",
    srcs = [
        "embed_test.c",
        ":embed_test.cembed.h",
        ":embed_test.cswitch.h",
    ],
)
